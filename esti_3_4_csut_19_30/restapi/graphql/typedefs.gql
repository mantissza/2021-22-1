type Query {
    helloWorld: String
    # ! - not null
    helloName(name: String!): String
    helloAuth: String

    genres: [Genre]
    genre(id: ID!): Genre

    movies: [Movie]
    movie(id: ID!): Movie

    users: [User]
    user(id: ID!): User

    top(limit: Int!): [Movie]
}

type Mutation {
    rate(movieId: ID!, rating: Int!, comment: String): RatingResponse
    deleteRating(movieId: ID!): Boolean!
}

type RatingResponse {
    rating: Rating
    isNewRating: Boolean!
}

type User {
    id: ID!
    email: EmailAddress!
    name: String!
    isAdmin: Boolean!
    createdAt: DateTime!
    updatedAt: DateTime!
    # Relációk
    ratings: [Rating]!
}

type Genre {
    id: ID!
    name: String!
    description: String
    createdAt: DateTime!
    updatedAt: DateTime!
    # Relációk
    movies: [Movie]
}

type Movie {
    id: ID!
    title: String!
    director: String
    description: String
    year: Int
    length: Int
    imageUrl: URL
    createdAt: DateTime!
    updatedAt: DateTime!
    averageRating: Float
    # Relációk
    genres: [Genre]
    ratings: [Rating]
}

type Rating {
    id: ID!
    rating: Int!
    comment: String
    createdAt: DateTime!
    updatedAt: DateTime!
    # Relációk
    user: User!
    movie: Movie!
}